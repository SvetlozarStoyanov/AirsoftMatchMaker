// <auto-generated />
using System;
using AirsoftMatchMaker.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AirsoftMatchMaker.Infrastructure.Migrations
{
    [DbContext(typeof(AirsoftMatchmakerDbContext))]
    partial class AirsoftMatchmakerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AirsoftMatchMaker.Infrastructure.Data.Entities.AmmoBox", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VendorId");

                    b.ToTable("AmmoBoxes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 50,
                            Name = "Small box",
                            Price = 10m,
                            Quantity = 900,
                            VendorId = 1
                        },
                        new
                        {
                            Id = 2,
                            Amount = 150,
                            Name = "Large box",
                            Price = 20m,
                            Quantity = 700,
                            VendorId = 1
                        },
                        new
                        {
                            Id = 3,
                            Amount = 300,
                            Name = "Extra Large box",
                            Price = 40m,
                            Quantity = 500,
                            VendorId = 1
                        },
                        new
                        {
                            Id = 4,
                            Amount = 1000,
                            Name = "Needlessly Large box",
                            Price = 100m,
                            Quantity = 300,
                            VendorId = 1
                        });
                });

            modelBuilder.Entity("AirsoftMatchMaker.Infrastructure.Data.Entities.Bet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BetStatus")
                        .HasColumnType("int");

                    b.Property<decimal>("CreditsBet")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<decimal>("TeamBlueRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TeamRedRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("WinningTeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("UserId");

                    b.ToTable("Bets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BetStatus = 0,
                            CreditsBet = 20m,
                            GameId = 1,
                            TeamBlueRate = 0.65m,
                            TeamRedRate = 1.25m,
                            UserId = "b2451308-1197-4362-be78-f7ea7ca35fe9",
                            WinningTeamId = 1
                        });
                });

            modelBuilder.Entity("AirsoftMatchMaker.Infrastructure.Data.Entities.Clothing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ClothingColor")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("VendorId");

                    b.ToTable("Clothes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClothingColor = 0,
                            Description = "Hard to spot in forest.",
                            Name = "Green outfit",
                            PlayerId = 4,
                            Price = 50m
                        },
                        new
                        {
                            Id = 2,
                            ClothingColor = 0,
                            Description = "Hard to spot in forest.",
                            Name = "Green outfit",
                            Price = 50m,
                            VendorId = 1
                        },
                        new
                        {
                            Id = 3,
                            ClothingColor = 0,
                            Description = "Hard to spot in forest.",
                            Name = "Green outfit",
                            PlayerId = 1,
                            Price = 50m
                        },
                        new
                        {
                            Id = 4,
                            ClothingColor = 0,
                            Description = "Hard to spot in forest.",
                            Name = "Green Ghillie Suit",
                            PlayerId = 5,
                            Price = 80m
                        },
                        new
                        {
                            Id = 5,
                            ClothingColor = 0,
                            Description = "Hard to spot in forest.",
                            Name = "Green Ghillie Suit",
                            Price = 80m,
                            VendorId = 1
                        },
                        new
                        {
                            Id = 6,
                            ClothingColor = 0,
                            Description = "Hard to spot in forest.",
                            Name = "Green Army camouflage",
                            Price = 60m,
                            VendorId = 1
                        },
                        new
                        {
                            Id = 7,
                            ClothingColor = 0,
                            Description = "Hard to spot in forest.",
                            Name = "Green Army camouflage",
                            Price = 60m,
                            VendorId = 1
                        },
                        new
                        {
                            Id = 8,
                            ClothingColor = 2,
                            Description = "Hard to spot in urban enviroment.",
                            Name = "Urban outfit",
                            Price = 40m,
                            VendorId = 1
                        },
                        new
                        {
                            Id = 9,
                            ClothingColor = 2,
                            Description = "Hard to spot in urban enviroment.",
                            Name = "Urban outfit",
                            PlayerId = 3,
                            Price = 40m
                        },
                        new
                        {
                            Id = 10,
                            ClothingColor = 2,
                            Description = "Hard to spot in urban enviroment.",
                            Name = "Urban outfit",
                            Price = 40m,
                            VendorId = 1
                        },
                        new
                        {
                            Id = 11,
                            ClothingColor = 2,
                            Description = "Hard to spot in urban enviroment.",
                            Name = "Urban outfit",
                            Price = 40m,
                            VendorId = 1
                        },
                        new
                        {
                            Id = 12,
                            ClothingColor = 2,
                            Description = "Hard to spot in urban enviroment.",
                            Name = "Gray tracksuit",
                            Price = 20m,
                            VendorId = 1
                        },
                        new
                        {
                            Id = 13,
                            ClothingColor = 3,
                            Description = "Hard to spot in field.",
                            Name = "Brown Army outfit ",
                            PlayerId = 2,
                            Price = 30m
                        },
                        new
                        {
                            Id = 14,
                            ClothingColor = 3,
                            Description = "Hard to spot in field.",
                            Name = "Brown Army outfit ",
                            Price = 30m,
                            VendorId = 1
                        },
                        new
                        {
                            Id = 15,
                            ClothingColor = 3,
                            Description = "Hard to spot in field.",
                            Name = "Brown Army outfit ",
                            Price = 30m,
                            VendorId = 1
                        },
                        new
                        {
                            Id = 16,
                            ClothingColor = 3,
                            Description = "Hard to spot in field.",
                            Name = "Brown Ghillie suit",
                            Price = 45m,
                            VendorId = 1
                        },
                        new
                        {
                            Id = 17,
                            ClothingColor = 3,
                            Description = "Hard to spot in field.",
                            Name = "Brown Ghillie suit",
                            Price = 45m,
                            VendorId = 1
                        },
                        new
                        {
                            Id = 18,
                            ClothingColor = 3,
                            Description = "Hard to spot in field.",
                            Name = "Brown Ghillie suit",
                            PlayerId = 6,
                            Price = 45m
                        },
                        new
                        {
                            Id = 19,
                            ClothingColor = 1,
                            Description = "Hard to spot in snow.",
                            Name = "White outfit",
                            Price = 40m,
                            VendorId = 1
                        },
                        new
                        {
                            Id = 20,
                            ClothingColor = 1,
                            Description = "Hard to spot in snow.",
                            Name = "White outfit",
                            Price = 40m,
                            VendorId = 1
                        },
                        new
                        {
                            Id = 21,
                            ClothingColor = 1,
                            Description = "Hard to spot in snow.",
                            Name = "White Ghillie suit",
                            Price = 55m,
                            VendorId = 1
                        },
                        new
                        {
                            Id = 22,
                            ClothingColor = 1,
                            Description = "Hard to spot in snow.",
                            Name = "White Ghillie suit",
                            Price = 55m,
                            VendorId = 1
                        },
                        new
                        {
                            Id = 23,
                            ClothingColor = 1,
                            Description = "Hard to spot in snow.",
                            Name = "White Ghillie suit",
                            Price = 55m,
                            VendorId = 1
                        });
                });

            modelBuilder.Entity("AirsoftMatchMaker.Infrastructure.Data.Entities.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("EntryFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("GameModeId")
                        .HasColumnType("int");

                    b.Property<int>("GameStatus")
                        .HasColumnType("int");

                    b.Property<int>("MapId")
                        .HasColumnType("int");

                    b.Property<int>("MatchmakerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Result")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("TeamBlueId")
                        .HasColumnType("int");

                    b.Property<int>("TeamBluePoints")
                        .HasColumnType("int");

                    b.Property<int>("TeamRedId")
                        .HasColumnType("int");

                    b.Property<int>("TeamRedPoints")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GameModeId");

                    b.HasIndex("MapId");

                    b.HasIndex("MatchmakerId");

                    b.HasIndex("TeamBlueId");

                    b.HasIndex("TeamRedId");

                    b.ToTable("Games");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2022, 11, 19, 12, 38, 14, 446, DateTimeKind.Local).AddTicks(8791),
                            EntryFee = 40m,
                            GameModeId = 1,
                            GameStatus = 0,
                            MapId = 1,
                            MatchmakerId = 1,
                            Name = "First Game",
                            TeamBlueId = 2,
                            TeamBluePoints = 0,
                            TeamRedId = 1,
                            TeamRedPoints = 0
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2022, 11, 20, 11, 38, 14, 446, DateTimeKind.Local).AddTicks(8827),
                            EntryFee = 40m,
                            GameModeId = 1,
                            GameStatus = 0,
                            MapId = 2,
                            MatchmakerId = 1,
                            Name = "Rematch Game",
                            TeamBlueId = 1,
                            TeamBluePoints = 0,
                            TeamRedId = 2,
                            TeamRedPoints = 0
                        });
                });

            modelBuilder.Entity("AirsoftMatchMaker.Infrastructure.Data.Entities.GameMode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("PointsToWin")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("GameModes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Whoever captures the flag first scores a point.",
                            Name = "Capture the flag",
                            PointsToWin = 3
                        },
                        new
                        {
                            Id = 2,
                            Description = "The team which controls the point in the middle for 5 minutes wins.",
                            Name = "Secure area",
                            PointsToWin = 2
                        });
                });

            modelBuilder.Entity("AirsoftMatchMaker.Infrastructure.Data.Entities.Map", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AverageEngagementDistance")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<int>("GameModeId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Mapsize")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<int>("Terrain")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GameModeId");

                    b.ToTable("Maps");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AverageEngagementDistance = 1,
                            Description = "Large forest map in Norway",
                            GameModeId = 1,
                            Mapsize = 2,
                            Name = "Bjorn Forest",
                            Terrain = 1
                        },
                        new
                        {
                            Id = 2,
                            AverageEngagementDistance = 0,
                            Description = "Small Field in California",
                            GameModeId = 2,
                            Mapsize = 0,
                            Name = "Clear Field",
                            Terrain = 2
                        },
                        new
                        {
                            Id = 3,
                            AverageEngagementDistance = 2,
                            Description = "Extra Large snowy map in Russia",
                            GameModeId = 2,
                            Mapsize = 3,
                            Name = "Snow Villa",
                            Terrain = 3
                        });
                });

            modelBuilder.Entity("AirsoftMatchMaker.Infrastructure.Data.Entities.Matchmaker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Matchmakers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsActive = true,
                            UserId = "c5d9e543-7c2f-4345-a014-ebd860eef718"
                        });
                });

            modelBuilder.Entity("AirsoftMatchMaker.Infrastructure.Data.Entities.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Ammo")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("PlayerClassId")
                        .HasColumnType("int");

                    b.Property<int>("PlayerStatus")
                        .HasColumnType("int");

                    b.Property<int>("SkillLevel")
                        .HasColumnType("int");

                    b.Property<int>("SkillPoints")
                        .HasColumnType("int");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PlayerClassId");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId");

                    b.ToTable("Players");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Ammo = 100,
                            IsActive = true,
                            PlayerClassId = 1,
                            PlayerStatus = 2,
                            SkillLevel = 0,
                            SkillPoints = 100,
                            TeamId = 1,
                            UserId = "202efe8b-7748-49ca-834c-fd1c37978ab2"
                        },
                        new
                        {
                            Id = 2,
                            Ammo = 100,
                            IsActive = true,
                            PlayerClassId = 2,
                            PlayerStatus = 2,
                            SkillLevel = 0,
                            SkillPoints = 100,
                            TeamId = 1,
                            UserId = "2a1bd8b6-6d06-470b-9dda-fe88aa1bf5e8"
                        },
                        new
                        {
                            Id = 3,
                            Ammo = 600,
                            IsActive = true,
                            PlayerClassId = 6,
                            PlayerStatus = 2,
                            SkillLevel = 0,
                            SkillPoints = 100,
                            TeamId = 2,
                            UserId = "4d64daba-17d4-452c-af3e-5d731a250283"
                        },
                        new
                        {
                            Id = 4,
                            Ammo = 200,
                            IsActive = true,
                            PlayerClassId = 7,
                            PlayerStatus = 2,
                            SkillLevel = 0,
                            SkillPoints = 100,
                            TeamId = 2,
                            UserId = "b2451308-1197-4362-be78-f7ea7ca35fe9"
                        },
                        new
                        {
                            Id = 5,
                            Ammo = 450,
                            IsActive = true,
                            PlayerClassId = 3,
                            PlayerStatus = 1,
                            SkillLevel = 0,
                            SkillPoints = 100,
                            UserId = "f3534aed-259b-4ff7-b816-15e8207e084a"
                        },
                        new
                        {
                            Id = 6,
                            Ammo = 450,
                            IsActive = true,
                            PlayerClassId = 3,
                            PlayerStatus = 1,
                            SkillLevel = 0,
                            SkillPoints = 100,
                            UserId = "f580c1f9-d41f-455e-b4ec-705b834e4b19"
                        });
                });

            modelBuilder.Entity("AirsoftMatchMaker.Infrastructure.Data.Entities.PlayerClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("PlayerClasses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "New to the game. Prone to make mistakes.",
                            Name = "New Player"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Provides good advice and coordinates teams well.",
                            Name = "Leader"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Always goes first. Good in both defence and offence.",
                            Name = "Frontline"
                        },
                        new
                        {
                            Id = 4,
                            Description = "High accuracy over long range. Struggles in close range.",
                            Name = "Marksman"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Loves to sneak behind and surprise enemy teams from behind.",
                            Name = "Sneaky"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Excels in defending, lacks in attacking.",
                            Name = "Camper"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Excels in attacking, lacks in defending.",
                            Name = "Rusher"
                        });
                });

            modelBuilder.Entity("AirsoftMatchMaker.Infrastructure.Data.Entities.RoleRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("RoleRequests");
                });

            modelBuilder.Entity("AirsoftMatchMaker.Infrastructure.Data.Entities.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Losses")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.Property<int>("Wins")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Losses = 0,
                            Name = "Alpha",
                            Wins = 0
                        },
                        new
                        {
                            Id = 2,
                            Losses = 0,
                            Name = "Bravo",
                            Wins = 0
                        },
                        new
                        {
                            Id = 3,
                            Losses = 0,
                            Name = "Charlie",
                            Wins = 1
                        },
                        new
                        {
                            Id = 4,
                            Losses = 1,
                            Name = "Delta",
                            Wins = 0
                        });
                });

            modelBuilder.Entity("AirsoftMatchMaker.Infrastructure.Data.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Credits")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "56d661fd-2339-498a-bd7e-c95f37908b28",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "57433a61-ffe3-470f-8840-dace1d202926",
                            Credits = 200m,
                            Email = "Petar@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "PETAR@GMAIL.COM",
                            NormalizedUserName = "PETAR",
                            PasswordHash = "AQAAAAEAACcQAAAAEN0sxerOBWqctbEWiWr8oyS3tSWzP41Q3QP8PsxquM6+hPeyZh8HE++KSypzpcomhw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ff1be511-23c2-4561-b6ba-2dc75f761386",
                            TwoFactorEnabled = false,
                            UserName = "Petar"
                        },
                        new
                        {
                            Id = "202efe8b-7748-49ca-834c-fd1c37978ab2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9029861f-1e35-4d84-b969-d862e0a9eb0b",
                            Credits = 200m,
                            Email = "Georgi@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "GEORGI@GMAIL.COM",
                            NormalizedUserName = "GEORGI",
                            PasswordHash = "AQAAAAEAACcQAAAAECIPBzDKA6Hp+MkLSHxdWHVU3RGjO0ffXGYYUC+anj2/ncK5+PuUiHsXx8wMy/jwLA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "77b936cc-3260-4e97-9976-9a49d43faf88",
                            TwoFactorEnabled = false,
                            UserName = "Georgi"
                        },
                        new
                        {
                            Id = "2a1bd8b6-6d06-470b-9dda-fe88aa1bf5e8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7ad2039d-e240-4eab-a808-87fdced2c671",
                            Credits = 200m,
                            Email = "Ivan@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "IVAN@GMAIL.COM",
                            NormalizedUserName = "IVAN",
                            PasswordHash = "AQAAAAEAACcQAAAAEH6JDRNPg7qmPxyHqvt2sX106P1+TiPV3URBFxXxWTnRZRROxb8cjAyM50lDersMGw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "705cf84f-f613-49c9-ad98-c93b2d3ac06d",
                            TwoFactorEnabled = false,
                            UserName = "Ivan"
                        },
                        new
                        {
                            Id = "4d64daba-17d4-452c-af3e-5d731a250283",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e9da12ad-613c-498a-8609-10395f5659fb",
                            Credits = 200m,
                            Email = "Michael@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MICHAEL@GMAIL.COM",
                            NormalizedUserName = "MICHAEL",
                            PasswordHash = "AQAAAAEAACcQAAAAEJxR+QXTqD/C0BruHkp4MsoQCaFFRBr7sG5eFzNxTdPawyj8YRlegplK73orVRFJ0g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "24c27739-3fb4-476d-b985-d6e980442ca4",
                            TwoFactorEnabled = false,
                            UserName = "Michael"
                        },
                        new
                        {
                            Id = "b2451308-1197-4362-be78-f7ea7ca35fe9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9c4cfdd7-cc82-4c24-9df3-d94c33ebed4d",
                            Credits = 200m,
                            Email = "Alexander@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ALEXANDER@GMAIL.COM",
                            NormalizedUserName = "ALEXANDER",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ7sbNECx9v/RgJi0zjyhQcRKGYGF/1yq3k3guCPR5m4dB+rv8JMYD33BHnS7tDwTw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bf45fc94-1ea1-46b9-a00f-6b2d385965f4",
                            TwoFactorEnabled = false,
                            UserName = "Alexander"
                        },
                        new
                        {
                            Id = "f3534aed-259b-4ff7-b816-15e8207e084a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "75d140cc-65b7-4480-81a6-ea1d51e775d9",
                            Credits = 200m,
                            Email = "Todor@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TODOR@GMAIL.COM",
                            NormalizedUserName = "TODOR",
                            PasswordHash = "AQAAAAEAACcQAAAAEPtet7Oqauogo6hdjN+9y75iBOMqu8sX5V9bLtW1fEEI99oW6ulO8PjlRnAfJuP/Mw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4a152b3c-80af-4b54-9066-7c7452e371fc",
                            TwoFactorEnabled = false,
                            UserName = "Todor"
                        },
                        new
                        {
                            Id = "f580c1f9-d41f-455e-b4ec-705b834e4b19",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "08d52d2f-d147-4fcc-a691-2f1d1e55a049",
                            Credits = 200m,
                            Email = "Hank@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "HANK@GMAIL.COM",
                            NormalizedUserName = "HANK",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ15moQfa6NzbPsmYTJvpgqWBoY0hn45jxEHh4qSUfYC+zJ2584LqAQdv2WzUpTeYA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8058f92f-2ebb-45b5-b6cf-c820b9bf7358",
                            TwoFactorEnabled = false,
                            UserName = "Hank"
                        },
                        new
                        {
                            Id = "77388c0c-698c-4df9-9ad9-cef29116b666",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ac7d599b-6d63-4160-94e4-243609519404",
                            Credits = 200m,
                            Email = "Vasil@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "VASIL@GMAIL.COM",
                            NormalizedUserName = "VASIL",
                            PasswordHash = "AQAAAAEAACcQAAAAEHqKiNANa1scU6pg4tOLezFE36OoXGL/O32yik2SE94uNNz4vNaxxaUW3uTcP3tcfg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e498f9e7-05a4-4281-970c-ba2906be8275",
                            TwoFactorEnabled = false,
                            UserName = "Vasil"
                        },
                        new
                        {
                            Id = "c5d9e543-7c2f-4345-a014-ebd860eef718",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d9b33de3-54f8-4082-bbc6-d7daaa393899",
                            Credits = 200m,
                            Email = "Krum@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "KRUM@GMAIL.COM",
                            NormalizedUserName = "KRUM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAfVSBevSD9RMHE1T7R9FjOkxbyGRGTPUtnxVTCQpkpw7CYFQ+8XvDR345/WCrB4bw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8f81acbc-b685-4387-adfe-4de36ea902f5",
                            TwoFactorEnabled = false,
                            UserName = "Krum"
                        },
                        new
                        {
                            Id = "cc1cb39b-c0cf-41ed-856c-d3943aec605a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c4b3c204-bcfa-4c56-bd6c-beb7ecc04396",
                            Credits = 200m,
                            Email = "Joe@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "JOE@GMAIL.COM",
                            NormalizedUserName = "JOE",
                            PasswordHash = "AQAAAAEAACcQAAAAEDm5pQl+aFw1BpkNpS1Gqug/S1y28dIXj+G8x0v6D4wd97lkaA1tWuUSpK7mZU+Kpg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "eb0c4a83-b586-4154-9bf4-1dc0739ea593",
                            TwoFactorEnabled = false,
                            UserName = "Joe"
                        });
                });

            modelBuilder.Entity("AirsoftMatchMaker.Infrastructure.Data.Entities.Vendor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Vendors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsActive = true,
                            UserId = "77388c0c-698c-4df9-9ad9-cef29116b666"
                        });
                });

            modelBuilder.Entity("AirsoftMatchMaker.Infrastructure.Data.Entities.Weapon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AverageAmmoExpendedPerGame")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("FeetPerSecond")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("FireRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("PreferedEngagementDistance")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("VendorId")
                        .HasColumnType("int");

                    b.Property<int>("WeaponType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("VendorId");

                    b.ToTable("Weapons");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AverageAmmoExpendedPerGame = 40,
                            Description = "Small pistol",
                            FeetPerSecond = 1.20m,
                            FireRate = 300m,
                            ImageUrl = "https://arms-bg.com/wp-content/uploads/imported/2.6412_17_links_2000_1125_0-600x600.jpg",
                            Name = "Glock 17",
                            PlayerId = 3,
                            PreferedEngagementDistance = 0,
                            Price = 20m,
                            WeaponType = 0
                        },
                        new
                        {
                            Id = 2,
                            AverageAmmoExpendedPerGame = 15,
                            Description = "Shotgun",
                            FeetPerSecond = 1.30m,
                            FireRate = 100m,
                            ImageUrl = "https://www.airsoft.bg/products/1334236938_160704__031226700_1656_02022011.jpg",
                            Name = "Benelli M3",
                            PlayerId = 1,
                            PreferedEngagementDistance = 1,
                            Price = 50m,
                            WeaponType = 1
                        },
                        new
                        {
                            Id = 3,
                            AverageAmmoExpendedPerGame = 90,
                            Description = "Popular Assault Rifle",
                            FeetPerSecond = 1.45m,
                            FireRate = 666m,
                            ImageUrl = "https://arms-bg.com/wp-content/uploads/2021/11/cyma-cm002a1-600x600.jpg",
                            Name = "M4A1",
                            PlayerId = 4,
                            PreferedEngagementDistance = 1,
                            Price = 100m,
                            WeaponType = 3
                        },
                        new
                        {
                            Id = 4,
                            AverageAmmoExpendedPerGame = 15,
                            Description = "Sniper Rifle",
                            FeetPerSecond = 1.60m,
                            FireRate = 20m,
                            ImageUrl = "https://cqb.bg/wp-content/uploads/1152193374_1.jpg",
                            Name = "AWP",
                            PlayerId = 5,
                            PreferedEngagementDistance = 2,
                            Price = 130m,
                            WeaponType = 4
                        },
                        new
                        {
                            Id = 5,
                            AverageAmmoExpendedPerGame = 120,
                            Description = "Good Smg",
                            FeetPerSecond = 1.10m,
                            FireRate = 700m,
                            ImageUrl = "https://nelo-mill.com/wp-content/uploads/2019/07/2.6311_MP5A5_links_ret_613_400_0.jpg",
                            Name = "Mp5",
                            PreferedEngagementDistance = 0,
                            Price = 70m,
                            VendorId = 1,
                            WeaponType = 2
                        },
                        new
                        {
                            Id = 6,
                            AverageAmmoExpendedPerGame = 100,
                            Description = "Very fast fire rate",
                            FeetPerSecond = 1.25m,
                            FireRate = 1200m,
                            ImageUrl = "https://shop.crgroup.bg/media/t44s4/2543.jpg",
                            Name = "FAMAS",
                            PreferedEngagementDistance = 1,
                            Price = 80m,
                            VendorId = 1,
                            WeaponType = 3
                        },
                        new
                        {
                            Id = 7,
                            AverageAmmoExpendedPerGame = 180,
                            Description = "Machine gun with good fire rate and good accuracy",
                            FeetPerSecond = 1.35m,
                            FireRate = 900m,
                            ImageUrl = "https://cqb.bg/wp-content/uploads/1152226012_6.jpg",
                            Name = "M249",
                            PreferedEngagementDistance = 1,
                            Price = 150m,
                            VendorId = 1,
                            WeaponType = 5
                        },
                        new
                        {
                            Id = 8,
                            AverageAmmoExpendedPerGame = 20,
                            Description = "Old fashioned sniper rifle for classy people",
                            FeetPerSecond = 1.45m,
                            FireRate = 15m,
                            ImageUrl = "https://cqb.bg/wp-content/uploads/1152190150_3.jpg",
                            Name = "Kar98k",
                            PreferedEngagementDistance = 2,
                            Price = 110m,
                            VendorId = 1,
                            WeaponType = 4
                        },
                        new
                        {
                            Id = 9,
                            AverageAmmoExpendedPerGame = 60,
                            Description = "Versatile assault rifle with good accuracy",
                            FeetPerSecond = 1.30m,
                            FireRate = 600m,
                            ImageUrl = "https://www.airsoft.bg/products/1333793093_Kalashnikov-AKM-AEG_CG120914_airsoft_zm.jpg",
                            Name = "AKM",
                            PlayerId = 2,
                            PreferedEngagementDistance = 1,
                            Price = 90m,
                            WeaponType = 3
                        },
                        new
                        {
                            Id = 10,
                            AverageAmmoExpendedPerGame = 300,
                            Description = "Overkill",
                            FeetPerSecond = 1.50m,
                            FireRate = 3000m,
                            ImageUrl = "https://www.evike.com/images/large/34905.jpg",
                            Name = "Minigun",
                            PreferedEngagementDistance = 0,
                            Price = 250m,
                            VendorId = 1,
                            WeaponType = 5
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "56d661fd-2339-498a-bd7e-c95f37908b28",
                            RoleId = "52f73adc-3c27-40de-b00e-2e2b382da84c"
                        },
                        new
                        {
                            UserId = "202efe8b-7748-49ca-834c-fd1c37978ab2",
                            RoleId = "6b3c10a1-4a55-411a-8dca-49574cb55e74"
                        },
                        new
                        {
                            UserId = "2a1bd8b6-6d06-470b-9dda-fe88aa1bf5e8",
                            RoleId = "6b3c10a1-4a55-411a-8dca-49574cb55e74"
                        },
                        new
                        {
                            UserId = "4d64daba-17d4-452c-af3e-5d731a250283",
                            RoleId = "6b3c10a1-4a55-411a-8dca-49574cb55e74"
                        },
                        new
                        {
                            UserId = "b2451308-1197-4362-be78-f7ea7ca35fe9",
                            RoleId = "6b3c10a1-4a55-411a-8dca-49574cb55e74"
                        },
                        new
                        {
                            UserId = "f3534aed-259b-4ff7-b816-15e8207e084a",
                            RoleId = "6b3c10a1-4a55-411a-8dca-49574cb55e74"
                        },
                        new
                        {
                            UserId = "f580c1f9-d41f-455e-b4ec-705b834e4b19",
                            RoleId = "6b3c10a1-4a55-411a-8dca-49574cb55e74"
                        },
                        new
                        {
                            UserId = "77388c0c-698c-4df9-9ad9-cef29116b666",
                            RoleId = "d0bd950a-e2d5-46cf-a6c1-1f0efa4144ce"
                        },
                        new
                        {
                            UserId = "c5d9e543-7c2f-4345-a014-ebd860eef718",
                            RoleId = "fc9628b0-fa92-4be1-9f1f-9095d66f1ff8"
                        },
                        new
                        {
                            UserId = "56d661fd-2339-498a-bd7e-c95f37908b28",
                            RoleId = "b48af83e-7873-4ecd-82de-5d517e7b31f9"
                        },
                        new
                        {
                            UserId = "cc1cb39b-c0cf-41ed-856c-d3943aec605a",
                            RoleId = "b48af83e-7873-4ecd-82de-5d517e7b31f9"
                        },
                        new
                        {
                            UserId = "202efe8b-7748-49ca-834c-fd1c37978ab2",
                            RoleId = "b48af83e-7873-4ecd-82de-5d517e7b31f9"
                        },
                        new
                        {
                            UserId = "2a1bd8b6-6d06-470b-9dda-fe88aa1bf5e8",
                            RoleId = "b48af83e-7873-4ecd-82de-5d517e7b31f9"
                        },
                        new
                        {
                            UserId = "4d64daba-17d4-452c-af3e-5d731a250283",
                            RoleId = "b48af83e-7873-4ecd-82de-5d517e7b31f9"
                        },
                        new
                        {
                            UserId = "b2451308-1197-4362-be78-f7ea7ca35fe9",
                            RoleId = "b48af83e-7873-4ecd-82de-5d517e7b31f9"
                        },
                        new
                        {
                            UserId = "f3534aed-259b-4ff7-b816-15e8207e084a",
                            RoleId = "b48af83e-7873-4ecd-82de-5d517e7b31f9"
                        },
                        new
                        {
                            UserId = "f580c1f9-d41f-455e-b4ec-705b834e4b19",
                            RoleId = "b48af83e-7873-4ecd-82de-5d517e7b31f9"
                        },
                        new
                        {
                            UserId = "77388c0c-698c-4df9-9ad9-cef29116b666",
                            RoleId = "b48af83e-7873-4ecd-82de-5d517e7b31f9"
                        },
                        new
                        {
                            UserId = "c5d9e543-7c2f-4345-a014-ebd860eef718",
                            RoleId = "b48af83e-7873-4ecd-82de-5d517e7b31f9"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AirsoftMatchMaker.Infrastructure.Data.Entities.Role", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasDiscriminator().HasValue("Role");

                    b.HasData(
                        new
                        {
                            Id = "52f73adc-3c27-40de-b00e-2e2b382da84c",
                            ConcurrencyStamp = "52f73adc-3c27-40de-b00e-2e2b382da84c",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR",
                            Description = "Responsible for granting roles."
                        },
                        new
                        {
                            Id = "d0bd950a-e2d5-46cf-a6c1-1f0efa4144ce",
                            ConcurrencyStamp = "d0bd950a-e2d5-46cf-a6c1-1f0efa4144ce",
                            Name = "Vendor",
                            NormalizedName = "VENDOR",
                            Description = "Imports and sells items. Cannot be a active player or matchmaker."
                        },
                        new
                        {
                            Id = "6b3c10a1-4a55-411a-8dca-49574cb55e74",
                            ConcurrencyStamp = "6b3c10a1-4a55-411a-8dca-49574cb55e74",
                            Name = "Player",
                            NormalizedName = "PLAYER",
                            Description = "Participates in games. Cannot be a active vendor or matchmaker."
                        },
                        new
                        {
                            Id = "fc9628b0-fa92-4be1-9f1f-9095d66f1ff8",
                            ConcurrencyStamp = "fc9628b0-fa92-4be1-9f1f-9095d66f1ff8",
                            Name = "Matchmaker",
                            NormalizedName = "MATCHMAKER",
                            Description = "Creates games and collects entry fee. Cannot be a active vendor or player. Cannot bet on games!"
                        },
                        new
                        {
                            Id = "b48af83e-7873-4ecd-82de-5d517e7b31f9",
                            ConcurrencyStamp = "b48af83e-7873-4ecd-82de-5d517e7b31f9",
                            Name = "GuestUser",
                            NormalizedName = "GUESTUSER",
                            Description = "User with no other roles. Can only bet on games."
                        });
                });

            modelBuilder.Entity("AirsoftMatchMaker.Infrastructure.Data.Entities.AmmoBox", b =>
                {
                    b.HasOne("AirsoftMatchMaker.Infrastructure.Data.Entities.Vendor", "Vendor")
                        .WithMany("AmmoBoxes")
                        .HasForeignKey("VendorId");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("AirsoftMatchMaker.Infrastructure.Data.Entities.Bet", b =>
                {
                    b.HasOne("AirsoftMatchMaker.Infrastructure.Data.Entities.Game", "Game")
                        .WithMany("Bets")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AirsoftMatchMaker.Infrastructure.Data.Entities.User", "User")
                        .WithMany("Bets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AirsoftMatchMaker.Infrastructure.Data.Entities.Clothing", b =>
                {
                    b.HasOne("AirsoftMatchMaker.Infrastructure.Data.Entities.Player", "Player")
                        .WithMany("Clothes")
                        .HasForeignKey("PlayerId");

                    b.HasOne("AirsoftMatchMaker.Infrastructure.Data.Entities.Vendor", "Vendor")
                        .WithMany("Clothes")
                        .HasForeignKey("VendorId");

                    b.Navigation("Player");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("AirsoftMatchMaker.Infrastructure.Data.Entities.Game", b =>
                {
                    b.HasOne("AirsoftMatchMaker.Infrastructure.Data.Entities.GameMode", "GameMode")
                        .WithMany("Games")
                        .HasForeignKey("GameModeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AirsoftMatchMaker.Infrastructure.Data.Entities.Map", "Map")
                        .WithMany("Games")
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AirsoftMatchMaker.Infrastructure.Data.Entities.Matchmaker", "Matchmaker")
                        .WithMany("OrganisedGames")
                        .HasForeignKey("MatchmakerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AirsoftMatchMaker.Infrastructure.Data.Entities.Team", "TeamBlue")
                        .WithMany("GamesAsTeamBlue")
                        .HasForeignKey("TeamBlueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AirsoftMatchMaker.Infrastructure.Data.Entities.Team", "TeamRed")
                        .WithMany("GamesAsTeamRed")
                        .HasForeignKey("TeamRedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GameMode");

                    b.Navigation("Map");

                    b.Navigation("Matchmaker");

                    b.Navigation("TeamBlue");

                    b.Navigation("TeamRed");
                });

            modelBuilder.Entity("AirsoftMatchMaker.Infrastructure.Data.Entities.Map", b =>
                {
                    b.HasOne("AirsoftMatchMaker.Infrastructure.Data.Entities.GameMode", "GameMode")
                        .WithMany("Maps")
                        .HasForeignKey("GameModeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GameMode");
                });

            modelBuilder.Entity("AirsoftMatchMaker.Infrastructure.Data.Entities.Matchmaker", b =>
                {
                    b.HasOne("AirsoftMatchMaker.Infrastructure.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AirsoftMatchMaker.Infrastructure.Data.Entities.Player", b =>
                {
                    b.HasOne("AirsoftMatchMaker.Infrastructure.Data.Entities.PlayerClass", "PlayerClass")
                        .WithMany("Players")
                        .HasForeignKey("PlayerClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AirsoftMatchMaker.Infrastructure.Data.Entities.Team", "Team")
                        .WithMany("Players")
                        .HasForeignKey("TeamId");

                    b.HasOne("AirsoftMatchMaker.Infrastructure.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlayerClass");

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AirsoftMatchMaker.Infrastructure.Data.Entities.RoleRequest", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AirsoftMatchMaker.Infrastructure.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AirsoftMatchMaker.Infrastructure.Data.Entities.Vendor", b =>
                {
                    b.HasOne("AirsoftMatchMaker.Infrastructure.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AirsoftMatchMaker.Infrastructure.Data.Entities.Weapon", b =>
                {
                    b.HasOne("AirsoftMatchMaker.Infrastructure.Data.Entities.Player", "Player")
                        .WithMany("Weapons")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AirsoftMatchMaker.Infrastructure.Data.Entities.Vendor", "Vendor")
                        .WithMany("Weapons")
                        .HasForeignKey("VendorId");

                    b.Navigation("Player");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AirsoftMatchMaker.Infrastructure.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AirsoftMatchMaker.Infrastructure.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AirsoftMatchMaker.Infrastructure.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AirsoftMatchMaker.Infrastructure.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AirsoftMatchMaker.Infrastructure.Data.Entities.Game", b =>
                {
                    b.Navigation("Bets");
                });

            modelBuilder.Entity("AirsoftMatchMaker.Infrastructure.Data.Entities.GameMode", b =>
                {
                    b.Navigation("Games");

                    b.Navigation("Maps");
                });

            modelBuilder.Entity("AirsoftMatchMaker.Infrastructure.Data.Entities.Map", b =>
                {
                    b.Navigation("Games");
                });

            modelBuilder.Entity("AirsoftMatchMaker.Infrastructure.Data.Entities.Matchmaker", b =>
                {
                    b.Navigation("OrganisedGames");
                });

            modelBuilder.Entity("AirsoftMatchMaker.Infrastructure.Data.Entities.Player", b =>
                {
                    b.Navigation("Clothes");

                    b.Navigation("Weapons");
                });

            modelBuilder.Entity("AirsoftMatchMaker.Infrastructure.Data.Entities.PlayerClass", b =>
                {
                    b.Navigation("Players");
                });

            modelBuilder.Entity("AirsoftMatchMaker.Infrastructure.Data.Entities.Team", b =>
                {
                    b.Navigation("GamesAsTeamBlue");

                    b.Navigation("GamesAsTeamRed");

                    b.Navigation("Players");
                });

            modelBuilder.Entity("AirsoftMatchMaker.Infrastructure.Data.Entities.User", b =>
                {
                    b.Navigation("Bets");
                });

            modelBuilder.Entity("AirsoftMatchMaker.Infrastructure.Data.Entities.Vendor", b =>
                {
                    b.Navigation("AmmoBoxes");

                    b.Navigation("Clothes");

                    b.Navigation("Weapons");
                });
#pragma warning restore 612, 618
        }
    }
}
