// <auto-generated />
using System;
using AirsoftMatchMaker.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AirsoftMatchMaker.Infrastructure.Migrations
{
    [DbContext(typeof(AirsoftMatchmakerDbContext))]
    partial class AirsoftMatchmakerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AirsoftMatchMaker.Infrastructure.Data.Entities.AmmoBox", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VendorId");

                    b.ToTable("AmmoBoxes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 50,
                            Name = "Small box",
                            Price = 10m,
                            Quantity = 900,
                            VendorId = 1
                        },
                        new
                        {
                            Id = 2,
                            Amount = 150,
                            Name = "Large box",
                            Price = 20m,
                            Quantity = 700,
                            VendorId = 1
                        },
                        new
                        {
                            Id = 3,
                            Amount = 300,
                            Name = "Extra Large box",
                            Price = 40m,
                            Quantity = 500,
                            VendorId = 1
                        },
                        new
                        {
                            Id = 4,
                            Amount = 1000,
                            Name = "Needlessly Large box",
                            Price = 100m,
                            Quantity = 300,
                            VendorId = 1
                        });
                });

            modelBuilder.Entity("AirsoftMatchMaker.Infrastructure.Data.Entities.Bet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BetStatus")
                        .HasColumnType("int");

                    b.Property<decimal>("CreditsBet")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<int>("Odds")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("WinningTeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("UserId");

                    b.ToTable("Bets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BetStatus = 0,
                            CreditsBet = 20m,
                            GameId = 1,
                            Odds = -122,
                            UserId = "cc1cb39b-c0cf-41ed-856c-d3943aec605a",
                            WinningTeamId = 1
                        },
                        new
                        {
                            Id = 2,
                            BetStatus = 0,
                            CreditsBet = 20m,
                            GameId = 1,
                            Odds = 120,
                            UserId = "1f5be09b-2910-4ac0-8ff5-5c525ddf1b61",
                            WinningTeamId = 2
                        },
                        new
                        {
                            Id = 3,
                            BetStatus = 0,
                            CreditsBet = 20m,
                            GameId = 1,
                            Odds = 122,
                            UserId = "799495ef-8794-491d-94d9-6bd37d51ba40",
                            WinningTeamId = 2
                        },
                        new
                        {
                            Id = 4,
                            BetStatus = 0,
                            CreditsBet = 30m,
                            GameId = 1,
                            Odds = -122,
                            UserId = "6f4bc586-751a-4a4b-8fec-4c7145b47a3e",
                            WinningTeamId = 1
                        });
                });

            modelBuilder.Entity("AirsoftMatchMaker.Infrastructure.Data.Entities.Clothing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ClothingColor")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("VendorId");

                    b.ToTable("Clothes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClothingColor = 0,
                            Description = "Hard to spot in forest.",
                            Name = "Green outfit",
                            PlayerId = 2,
                            Price = 50m
                        },
                        new
                        {
                            Id = 2,
                            ClothingColor = 0,
                            Description = "Hard to spot in forest.",
                            Name = "Green outfit",
                            PlayerId = 12,
                            Price = 50m
                        },
                        new
                        {
                            Id = 3,
                            ClothingColor = 0,
                            Description = "Hard to spot in forest.",
                            Name = "Green outfit",
                            PlayerId = 13,
                            Price = 50m
                        },
                        new
                        {
                            Id = 4,
                            ClothingColor = 0,
                            Description = "Hard to spot in forest.",
                            Name = "Green outfit",
                            PlayerId = 6,
                            Price = 50m
                        },
                        new
                        {
                            Id = 5,
                            ClothingColor = 0,
                            Description = "Hard to spot in forest.",
                            Name = "Green outfit",
                            PlayerId = 5,
                            Price = 50m
                        },
                        new
                        {
                            Id = 6,
                            ClothingColor = 0,
                            Description = "Hard to spot in forest.",
                            Name = "Green outfit",
                            PlayerId = 3,
                            Price = 50m
                        },
                        new
                        {
                            Id = 7,
                            ClothingColor = 0,
                            Description = "Hard to spot in forest.",
                            Name = "Green outfit",
                            PlayerId = 7,
                            Price = 50m
                        },
                        new
                        {
                            Id = 8,
                            ClothingColor = 0,
                            Description = "Hard to spot in forest.",
                            Name = "Green Ghillie Suit",
                            PlayerId = 8,
                            Price = 80m
                        },
                        new
                        {
                            Id = 9,
                            ClothingColor = 0,
                            Description = "Hard to spot in forest.",
                            Name = "Green Ghillie Suit",
                            PlayerId = 4,
                            Price = 80m
                        },
                        new
                        {
                            Id = 10,
                            ClothingColor = 0,
                            Description = "Hard to spot in forest.",
                            Name = "Green Army camouflage",
                            PlayerId = 1,
                            Price = 60m
                        },
                        new
                        {
                            Id = 11,
                            ClothingColor = 0,
                            Description = "Hard to spot in forest.",
                            Name = "Green Army camouflage",
                            PlayerId = 10,
                            Price = 60m
                        },
                        new
                        {
                            Id = 12,
                            ClothingColor = 2,
                            Description = "Hard to spot in urban enviroment.",
                            Name = "Urban outfit",
                            PlayerId = 9,
                            Price = 40m
                        },
                        new
                        {
                            Id = 13,
                            ClothingColor = 2,
                            Description = "Hard to spot in urban enviroment.",
                            Name = "Urban outfit",
                            PlayerId = 11,
                            Price = 40m
                        },
                        new
                        {
                            Id = 14,
                            ClothingColor = 2,
                            Description = "Hard to spot in urban enviroment.",
                            Name = "Urban outfit",
                            PlayerId = 14,
                            Price = 40m
                        },
                        new
                        {
                            Id = 15,
                            ClothingColor = 2,
                            Description = "Hard to spot in urban enviroment.",
                            Name = "Urban outfit",
                            PlayerId = 15,
                            Price = 40m
                        },
                        new
                        {
                            Id = 16,
                            ClothingColor = 2,
                            Description = "Hard to spot in urban enviroment.",
                            Name = "Gray tracksuit",
                            Price = 20m,
                            VendorId = 1
                        },
                        new
                        {
                            Id = 17,
                            ClothingColor = 3,
                            Description = "Hard to spot in field.",
                            Name = "Brown Army outfit ",
                            Price = 30m,
                            VendorId = 1
                        },
                        new
                        {
                            Id = 18,
                            ClothingColor = 3,
                            Description = "Hard to spot in field.",
                            Name = "Brown Army outfit ",
                            Price = 30m,
                            VendorId = 1
                        },
                        new
                        {
                            Id = 19,
                            ClothingColor = 3,
                            Description = "Hard to spot in field.",
                            Name = "Brown Army outfit ",
                            Price = 30m,
                            VendorId = 1
                        },
                        new
                        {
                            Id = 20,
                            ClothingColor = 3,
                            Description = "Hard to spot in field.",
                            Name = "Brown Ghillie suit",
                            Price = 45m,
                            VendorId = 1
                        },
                        new
                        {
                            Id = 21,
                            ClothingColor = 3,
                            Description = "Hard to spot in field.",
                            Name = "Brown Ghillie suit",
                            Price = 45m,
                            VendorId = 1
                        },
                        new
                        {
                            Id = 22,
                            ClothingColor = 3,
                            Description = "Hard to spot in field.",
                            Name = "Brown Ghillie suit",
                            Price = 45m,
                            VendorId = 1
                        },
                        new
                        {
                            Id = 23,
                            ClothingColor = 1,
                            Description = "Hard to spot in snow.",
                            Name = "White outfit",
                            Price = 40m,
                            VendorId = 1
                        },
                        new
                        {
                            Id = 24,
                            ClothingColor = 1,
                            Description = "Hard to spot in snow.",
                            Name = "White outfit",
                            Price = 40m,
                            VendorId = 1
                        },
                        new
                        {
                            Id = 25,
                            ClothingColor = 1,
                            Description = "Hard to spot in snow.",
                            Name = "White Ghillie suit",
                            Price = 55m,
                            VendorId = 1
                        },
                        new
                        {
                            Id = 26,
                            ClothingColor = 1,
                            Description = "Hard to spot in snow.",
                            Name = "White Ghillie suit",
                            Price = 55m,
                            VendorId = 1
                        },
                        new
                        {
                            Id = 27,
                            ClothingColor = 1,
                            Description = "Hard to spot in snow.",
                            Name = "White Ghillie suit",
                            Price = 55m,
                            VendorId = 1
                        },
                        new
                        {
                            Id = 28,
                            ClothingColor = 0,
                            Description = "Hard to spot in forest.",
                            Name = "Green Ghillie Suit",
                            Price = 80m,
                            VendorId = 1
                        });
                });

            modelBuilder.Entity("AirsoftMatchMaker.Infrastructure.Data.Entities.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("EntryFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("GameBetCreditsContainerId")
                        .HasColumnType("int");

                    b.Property<int>("GameModeId")
                        .HasColumnType("int");

                    b.Property<int>("GameStatus")
                        .HasColumnType("int");

                    b.Property<int>("MapId")
                        .HasColumnType("int");

                    b.Property<int>("MatchmakerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<bool>("OddsAreUpdated")
                        .HasColumnType("bit");

                    b.Property<string>("Result")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("TeamBlueId")
                        .HasColumnType("int");

                    b.Property<int>("TeamBlueOdds")
                        .HasColumnType("int");

                    b.Property<int>("TeamBluePoints")
                        .HasColumnType("int");

                    b.Property<int>("TeamRedId")
                        .HasColumnType("int");

                    b.Property<int>("TeamRedOdds")
                        .HasColumnType("int");

                    b.Property<int>("TeamRedPoints")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GameModeId");

                    b.HasIndex("MapId");

                    b.HasIndex("MatchmakerId");

                    b.HasIndex("TeamBlueId");

                    b.HasIndex("TeamRedId");

                    b.ToTable("Games");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2022, 12, 17, 15, 20, 26, 121, DateTimeKind.Local).AddTicks(8748),
                            EntryFee = 40m,
                            GameBetCreditsContainerId = 1,
                            GameModeId = 1,
                            GameStatus = 0,
                            MapId = 1,
                            MatchmakerId = 1,
                            Name = "Alpha vs Bravo",
                            OddsAreUpdated = true,
                            TeamBlueId = 2,
                            TeamBlueOdds = 124,
                            TeamBluePoints = 0,
                            TeamRedId = 1,
                            TeamRedOdds = -126,
                            TeamRedPoints = 0
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2022, 12, 19, 15, 20, 26, 121, DateTimeKind.Local).AddTicks(8801),
                            EntryFee = 40m,
                            GameBetCreditsContainerId = 2,
                            GameModeId = 1,
                            GameStatus = 0,
                            MapId = 2,
                            MatchmakerId = 1,
                            Name = "Bravo vs Alpha",
                            OddsAreUpdated = false,
                            TeamBlueId = 1,
                            TeamBlueOdds = -140,
                            TeamBluePoints = 0,
                            TeamRedId = 2,
                            TeamRedOdds = 140,
                            TeamRedPoints = 0
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(2022, 12, 19, 15, 20, 26, 121, DateTimeKind.Local).AddTicks(8804),
                            EntryFee = 40m,
                            GameBetCreditsContainerId = 3,
                            GameModeId = 1,
                            GameStatus = 0,
                            MapId = 2,
                            MatchmakerId = 1,
                            Name = "Charlie vs Delta",
                            OddsAreUpdated = false,
                            TeamBlueId = 4,
                            TeamBlueOdds = 150,
                            TeamBluePoints = 0,
                            TeamRedId = 3,
                            TeamRedOdds = -160,
                            TeamRedPoints = 0
                        });
                });

            modelBuilder.Entity("AirsoftMatchMaker.Infrastructure.Data.Entities.GameBetCreditsContainer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("BetsArePaidOut")
                        .HasColumnType("bit");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<decimal>("TeamBlueCreditsBet")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TeamRedCreditsBet")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("GameId")
                        .IsUnique();

                    b.ToTable("GameBetCreditsContainers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BetsArePaidOut = false,
                            GameId = 1,
                            TeamBlueCreditsBet = 40m,
                            TeamRedCreditsBet = 50m
                        },
                        new
                        {
                            Id = 2,
                            BetsArePaidOut = false,
                            GameId = 2,
                            TeamBlueCreditsBet = 0m,
                            TeamRedCreditsBet = 0m
                        },
                        new
                        {
                            Id = 3,
                            BetsArePaidOut = false,
                            GameId = 3,
                            TeamBlueCreditsBet = 0m,
                            TeamRedCreditsBet = 0m
                        });
                });

            modelBuilder.Entity("AirsoftMatchMaker.Infrastructure.Data.Entities.GameMode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("PointsToWin")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("GameModes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Whoever captures the flag first scores a point.",
                            Name = "Capture the flag",
                            PointsToWin = 3
                        },
                        new
                        {
                            Id = 2,
                            Description = "The team which controls the point in the middle for 5 minutes wins.",
                            Name = "Secure area",
                            PointsToWin = 2
                        });
                });

            modelBuilder.Entity("AirsoftMatchMaker.Infrastructure.Data.Entities.Map", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AverageEngagementDistance")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<int>("GameModeId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Mapsize")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<int>("Terrain")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GameModeId");

                    b.ToTable("Maps");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AverageEngagementDistance = 1,
                            Description = "Large forest map in Norway",
                            GameModeId = 1,
                            ImageUrl = "https://cdn.britannica.com/87/138787-050-33727493/Belovezhskaya-Forest-Poland.jpg",
                            Mapsize = 2,
                            Name = "Forest",
                            Terrain = 1
                        },
                        new
                        {
                            Id = 2,
                            AverageEngagementDistance = 0,
                            Description = "Small Field in California",
                            GameModeId = 2,
                            ImageUrl = "https://www.arboursabroad.com/westflanders_be_110318-56/",
                            Mapsize = 0,
                            Name = "Clear Field",
                            Terrain = 2
                        },
                        new
                        {
                            Id = 3,
                            AverageEngagementDistance = 2,
                            Description = "Extra Large snowy map in Russia",
                            GameModeId = 2,
                            ImageUrl = "https://www.rukavillas.com/wp-content/uploads/2020/01/snowpalace-outside-800.jpg",
                            Mapsize = 3,
                            Name = "Snow Villa",
                            Terrain = 3
                        });
                });

            modelBuilder.Entity("AirsoftMatchMaker.Infrastructure.Data.Entities.Matchmaker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Matchmakers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsActive = true,
                            UserId = "c5d9e543-7c2f-4345-a014-ebd860eef718"
                        });
                });

            modelBuilder.Entity("AirsoftMatchMaker.Infrastructure.Data.Entities.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Ammo")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("PlayerClassId")
                        .HasColumnType("int");

                    b.Property<int>("SkillLevel")
                        .HasColumnType("int");

                    b.Property<int>("SkillPoints")
                        .HasColumnType("int");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PlayerClassId");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId");

                    b.ToTable("Players");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Ammo = 200,
                            IsActive = true,
                            PlayerClassId = 1,
                            SkillLevel = 0,
                            SkillPoints = 100,
                            TeamId = 1,
                            UserId = "202efe8b-7748-49ca-834c-fd1c37978ab2"
                        },
                        new
                        {
                            Id = 2,
                            Ammo = 200,
                            IsActive = true,
                            PlayerClassId = 2,
                            SkillLevel = 0,
                            SkillPoints = 100,
                            TeamId = 1,
                            UserId = "2a1bd8b6-6d06-470b-9dda-fe88aa1bf5e8"
                        },
                        new
                        {
                            Id = 3,
                            Ammo = 600,
                            IsActive = true,
                            PlayerClassId = 6,
                            SkillLevel = 0,
                            SkillPoints = 100,
                            TeamId = 2,
                            UserId = "4d64daba-17d4-452c-af3e-5d731a250283"
                        },
                        new
                        {
                            Id = 4,
                            Ammo = 200,
                            IsActive = true,
                            PlayerClassId = 7,
                            SkillLevel = 0,
                            SkillPoints = 100,
                            TeamId = 2,
                            UserId = "b2451308-1197-4362-be78-f7ea7ca35fe9"
                        },
                        new
                        {
                            Id = 5,
                            Ammo = 450,
                            IsActive = true,
                            PlayerClassId = 1,
                            SkillLevel = 0,
                            SkillPoints = 100,
                            UserId = "f3534aed-259b-4ff7-b816-15e8207e084a"
                        },
                        new
                        {
                            Id = 6,
                            Ammo = 450,
                            IsActive = true,
                            PlayerClassId = 4,
                            SkillLevel = 0,
                            SkillPoints = 100,
                            UserId = "f580c1f9-d41f-455e-b4ec-705b834e4b19"
                        },
                        new
                        {
                            Id = 7,
                            Ammo = 450,
                            IsActive = true,
                            PlayerClassId = 6,
                            SkillLevel = 0,
                            SkillPoints = 100,
                            TeamId = 3,
                            UserId = "14677dd9-7de7-41c0-9418-e43ddcf64859"
                        },
                        new
                        {
                            Id = 8,
                            Ammo = 450,
                            IsActive = true,
                            PlayerClassId = 7,
                            SkillLevel = 0,
                            SkillPoints = 100,
                            TeamId = 3,
                            UserId = "c95011ef-d0e4-49c0-bbdd-1b9985bf7a74"
                        },
                        new
                        {
                            Id = 9,
                            Ammo = 450,
                            IsActive = true,
                            PlayerClassId = 4,
                            SkillLevel = 0,
                            SkillPoints = 100,
                            TeamId = 3,
                            UserId = "1f1087d3-a55a-4b7a-932e-1c3f9817fcf0"
                        },
                        new
                        {
                            Id = 10,
                            Ammo = 450,
                            IsActive = true,
                            PlayerClassId = 5,
                            SkillLevel = 0,
                            SkillPoints = 100,
                            TeamId = 3,
                            UserId = "5f83ea0f-418b-463f-9a52-bf1b9eac8bc6"
                        },
                        new
                        {
                            Id = 11,
                            Ammo = 450,
                            IsActive = true,
                            PlayerClassId = 1,
                            SkillLevel = 0,
                            SkillPoints = 100,
                            TeamId = 3,
                            UserId = "0a9aab7f-739a-41d8-b18d-8b797c7a2dfe"
                        },
                        new
                        {
                            Id = 12,
                            Ammo = 450,
                            IsActive = true,
                            PlayerClassId = 4,
                            SkillLevel = 0,
                            SkillPoints = 100,
                            TeamId = 4,
                            UserId = "3bf3238b-ab04-4945-8bd0-1eabf8a208d5"
                        },
                        new
                        {
                            Id = 13,
                            Ammo = 450,
                            IsActive = true,
                            PlayerClassId = 6,
                            SkillLevel = 0,
                            SkillPoints = 100,
                            TeamId = 4,
                            UserId = "18a322e4-ade8-4f13-8981-4cac7be64b9c"
                        },
                        new
                        {
                            Id = 14,
                            Ammo = 450,
                            IsActive = true,
                            PlayerClassId = 7,
                            SkillLevel = 0,
                            SkillPoints = 100,
                            TeamId = 4,
                            UserId = "799495ef-8794-491d-94d9-6bd37d51ba40"
                        },
                        new
                        {
                            Id = 15,
                            Ammo = 450,
                            IsActive = true,
                            PlayerClassId = 1,
                            SkillLevel = 0,
                            SkillPoints = 100,
                            TeamId = 4,
                            UserId = "6f4bc586-751a-4a4b-8fec-4c7145b47a3e"
                        });
                });

            modelBuilder.Entity("AirsoftMatchMaker.Infrastructure.Data.Entities.PlayerClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("PlayerClasses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "New to the game. Prone to make mistakes.",
                            Name = "New Player"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Provides good advice and coordinates teams well.",
                            Name = "Leader"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Always goes first. Good in both defence and offence.",
                            Name = "Frontline"
                        },
                        new
                        {
                            Id = 4,
                            Description = "High accuracy over long range. Struggles in close range.",
                            Name = "Marksman"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Loves to sneak behind and surprise enemy teams from behind.",
                            Name = "Sneaky"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Excels in defending, lacks in attacking.",
                            Name = "Camper"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Excels in attacking, lacks in defending.",
                            Name = "Rusher"
                        });
                });

            modelBuilder.Entity("AirsoftMatchMaker.Infrastructure.Data.Entities.RoleRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("RoleRequests");
                });

            modelBuilder.Entity("AirsoftMatchMaker.Infrastructure.Data.Entities.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Losses")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.Property<int>("Wins")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Losses = 0,
                            Name = "Alpha",
                            Wins = 0
                        },
                        new
                        {
                            Id = 2,
                            Losses = 0,
                            Name = "Bravo",
                            Wins = 0
                        },
                        new
                        {
                            Id = 3,
                            Losses = 0,
                            Name = "Charlie",
                            Wins = 0
                        },
                        new
                        {
                            Id = 4,
                            Losses = 0,
                            Name = "Delta",
                            Wins = 0
                        });
                });

            modelBuilder.Entity("AirsoftMatchMaker.Infrastructure.Data.Entities.TeamRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<int>("TeamRequestStatus")
                        .HasColumnType("int");

                    b.Property<int>("TeamRequestType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TeamId");

                    b.ToTable("TeamRequests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PlayerId = 5,
                            TeamId = 1,
                            TeamRequestStatus = 1,
                            TeamRequestType = 0
                        },
                        new
                        {
                            Id = 2,
                            PlayerId = 6,
                            TeamId = 2,
                            TeamRequestStatus = 1,
                            TeamRequestType = 0
                        });
                });

            modelBuilder.Entity("AirsoftMatchMaker.Infrastructure.Data.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Credits")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "56d661fd-2339-498a-bd7e-c95f37908b28",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2f0684cb-448a-4a9e-83cb-8a5f99ee1073",
                            Credits = 200m,
                            Email = "Admin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEHYZ6MCoxzoHS9eu8a0LKrUkA/pi4s+nvn8lOWOqR06nUMTcFywmCO5r+O7YkNflgw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e0f74cbb-1fae-4ddb-a9e4-05dc0518d008",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = "202efe8b-7748-49ca-834c-fd1c37978ab2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "43390507-023d-410b-aafd-d90f11f6e110",
                            Credits = 200m,
                            Email = "Georgi@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "GEORGI@GMAIL.COM",
                            NormalizedUserName = "GEORGI",
                            PasswordHash = "AQAAAAEAACcQAAAAELWWlgBRVMNRlEFgiB+qEcHfB74EugJz9RwQ+7tMzI9iGXwRWp3dobxu1oeP+5Ndjw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8f4fc1f7-a89b-48df-9429-443eb16b0201",
                            TwoFactorEnabled = false,
                            UserName = "Georgi"
                        },
                        new
                        {
                            Id = "2a1bd8b6-6d06-470b-9dda-fe88aa1bf5e8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0b6312f7-6284-432b-bcc7-59d6fa227677",
                            Credits = 200m,
                            Email = "Ivan@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "IVAN@GMAIL.COM",
                            NormalizedUserName = "IVAN",
                            PasswordHash = "AQAAAAEAACcQAAAAEGeQoqtm44Z59xbAqCJEMBIIp/mkK17xGHdXkIqwVp/IxDbdlkk2K8kXsFL9jE7voA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c86d3ad2-c6dc-4bf3-b5dc-e79c3a59adb0",
                            TwoFactorEnabled = false,
                            UserName = "Ivan"
                        },
                        new
                        {
                            Id = "4d64daba-17d4-452c-af3e-5d731a250283",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f9dafbf5-8f8e-4096-adb6-015649bba46c",
                            Credits = 200m,
                            Email = "Michael@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MICHAEL@GMAIL.COM",
                            NormalizedUserName = "MICHAEL",
                            PasswordHash = "AQAAAAEAACcQAAAAEOUIaFSmI0uJ+EybNM0nRyI7NtodY7/g/gSVLkthiegLAlJp+RFk2bO9l3Ug1oIJDQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3204beb0-d890-4fb5-9c66-a14c0bf9dcb9",
                            TwoFactorEnabled = false,
                            UserName = "Michael"
                        },
                        new
                        {
                            Id = "b2451308-1197-4362-be78-f7ea7ca35fe9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "14e4badd-cde9-46de-8000-12de22532d00",
                            Credits = 200m,
                            Email = "Alexander@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ALEXANDER@GMAIL.COM",
                            NormalizedUserName = "ALEXANDER",
                            PasswordHash = "AQAAAAEAACcQAAAAEJbBn7CLG3O2vvErbm3rF73KvxnD593wILRcCkYdX1ibPZWnk0OJQx60qR05O5LvAw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "08de0174-3ac3-470d-a8d8-dfe8c07550e6",
                            TwoFactorEnabled = false,
                            UserName = "Alexander"
                        },
                        new
                        {
                            Id = "f3534aed-259b-4ff7-b816-15e8207e084a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8e0fa6fd-dc16-4e5d-9a00-6179bfaeaf66",
                            Credits = 200m,
                            Email = "Todor@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TODOR@GMAIL.COM",
                            NormalizedUserName = "TODOR",
                            PasswordHash = "AQAAAAEAACcQAAAAEAE3jro9obKF+8jqBic1rx1T8R3DchC+ZBWQmPJK4D/hw1quBzRpLwMHphYsS6t/Aw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "147509d0-44a2-4aad-9960-2b6732e3e81e",
                            TwoFactorEnabled = false,
                            UserName = "Todor"
                        },
                        new
                        {
                            Id = "f580c1f9-d41f-455e-b4ec-705b834e4b19",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "da7b3f1c-aaaa-4caa-b03f-6d0dc7fa9f8e",
                            Credits = 200m,
                            Email = "Hank@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "HANK@GMAIL.COM",
                            NormalizedUserName = "HANK",
                            PasswordHash = "AQAAAAEAACcQAAAAEKbqt0A1kPlpAGPK72i48GhvHwqBVmZR4/dqJ5MXZsybxIm5vucUtogwKHs3A0/QGg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "40d840ca-eda4-45e3-8905-013e85cc5522",
                            TwoFactorEnabled = false,
                            UserName = "Hank"
                        },
                        new
                        {
                            Id = "14677dd9-7de7-41c0-9418-e43ddcf64859",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "09a03fd8-73a0-4f18-b603-320780f40733",
                            Credits = 200m,
                            Email = "John@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "JOHN@GMAIL.COM",
                            NormalizedUserName = "JOHN",
                            PasswordHash = "AQAAAAEAACcQAAAAEF7VWfYd7ztbXQttWOMxOfk5ppLysizaXeJslNBAjklq416+G1B+IClKcz+lPTJDdw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "740932bc-3f4f-4727-b4d4-bc36826104a6",
                            TwoFactorEnabled = false,
                            UserName = "John"
                        },
                        new
                        {
                            Id = "c95011ef-d0e4-49c0-bbdd-1b9985bf7a74",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fd2599b7-3deb-48bc-a4d6-a80dbf7e86e1",
                            Credits = 200m,
                            Email = "Walter@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "WALTER@GMAIL.COM",
                            NormalizedUserName = "WALTER",
                            PasswordHash = "AQAAAAEAACcQAAAAEFq/7PiqFNZfOa6Q0EXWbgDo2EubmJB6rElTon8nycvJRagk/HFDjHvDhp/gpoY/mQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "462a3762-9f30-4429-a2d0-ee7f5aa75540",
                            TwoFactorEnabled = false,
                            UserName = "Walter"
                        },
                        new
                        {
                            Id = "1f1087d3-a55a-4b7a-932e-1c3f9817fcf0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a2cc55ec-6e0c-4927-aed8-07c915aee7da",
                            Credits = 200m,
                            Email = "Daniel@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DANIEL@GMAIL.COM",
                            NormalizedUserName = "DANIEL",
                            PasswordHash = "AQAAAAEAACcQAAAAEBLACCu4DDZMgkD1XYbwLO+jpPDGc00TRA6MNhkCYk5WplPKPIBRwmUYFGs+m9H4sw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "233d2781-140b-4736-9abe-1fb91bde7ce4",
                            TwoFactorEnabled = false,
                            UserName = "Daniel"
                        },
                        new
                        {
                            Id = "5f83ea0f-418b-463f-9a52-bf1b9eac8bc6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bde3ed25-1ce4-416d-92d0-a23937d850bf",
                            Credits = 200m,
                            Email = "Philip@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "PHILIP@GMAIL.COM",
                            NormalizedUserName = "PHILIP",
                            PasswordHash = "AQAAAAEAACcQAAAAEFWZUZuYM8JdsaP2nwbU0Ipl+NZMKyyLrFHPc3At6PO58CIlzcaolEwshZ4FUyqfGg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c594d470-9aa4-4459-b406-42ec09f7fb81",
                            TwoFactorEnabled = false,
                            UserName = "Philip"
                        },
                        new
                        {
                            Id = "0a9aab7f-739a-41d8-b18d-8b797c7a2dfe",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "47a1a7c2-464e-482c-b279-056dfb98d3cf",
                            Credits = 200m,
                            Email = "Liam@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "LIAM@GMAIL.COM",
                            NormalizedUserName = "LIAM",
                            PasswordHash = "AQAAAAEAACcQAAAAEF+LJU+m+TLJWzPz+yJSGXN1VmNHC9Hyf29u+APt2HUv3bF+0uBigIsPv3jXCY6cjA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0ebe14c7-80ef-470e-8919-eb6573b47ce3",
                            TwoFactorEnabled = false,
                            UserName = "Liam"
                        },
                        new
                        {
                            Id = "3bf3238b-ab04-4945-8bd0-1eabf8a208d5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7b80eff9-289e-464f-a863-262fde6ed3a6",
                            Credits = 200m,
                            Email = "Tihomir@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TIHOMIR@GMAIL.COM",
                            NormalizedUserName = "TIHOMIR",
                            PasswordHash = "AQAAAAEAACcQAAAAEB8cHMBB24KBe8O7vhkQPfiQBerroZgDfK9+OtlWOkjt/sbtHCh93UPpCwgYwFjtuw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dbbfb0de-6a27-434d-a247-9d4cff37dacb",
                            TwoFactorEnabled = false,
                            UserName = "Tihomir"
                        },
                        new
                        {
                            Id = "18a322e4-ade8-4f13-8981-4cac7be64b9c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "19d78866-e0a1-4392-ae35-3016207c22a2",
                            Credits = 200m,
                            Email = "Stoyan@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "STOYAN@GMAIL.COM",
                            NormalizedUserName = "STOYAN",
                            PasswordHash = "AQAAAAEAACcQAAAAEG4BeI/EeHa45uRKFKn8hbT1tN4qKV1pENrkL1qG8XrxJ0lvNlYLnf60m+GSks9CSg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b7174041-9a1b-4b99-80c0-6a9a1caf34e5",
                            TwoFactorEnabled = false,
                            UserName = "Stoyan"
                        },
                        new
                        {
                            Id = "799495ef-8794-491d-94d9-6bd37d51ba40",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8656938e-f8d3-4dfd-9d41-f519de8ffc64",
                            Credits = 200m,
                            Email = "Ivaylo@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "IVAYLO@GMAIL.COM",
                            NormalizedUserName = "IVAYLO",
                            PasswordHash = "AQAAAAEAACcQAAAAEEWVcY9Pj5zfc/wE5hW9mp9iFiiNCSzrJT8mIE4XuWAHTnliI9HJDD4B+E5RfSPhpg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ec681f0c-b509-463a-b706-38317a19129c",
                            TwoFactorEnabled = false,
                            UserName = "Ivaylo"
                        },
                        new
                        {
                            Id = "6f4bc586-751a-4a4b-8fec-4c7145b47a3e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ce328f2f-68f8-4a6b-b6b0-dab7ef6f5654",
                            Credits = 200m,
                            Email = "Dimitrichko@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "DIMITRICHKO@GMAIL.COM",
                            NormalizedUserName = "DIMITRICHKO",
                            PasswordHash = "AQAAAAEAACcQAAAAEHr0u/ArFgBPtezPcLE6BmpRXTErsWhTW9Bcd9uPrtXSOFJqjf1U94ZCh+Hb0UDfuA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "79ba0e11-056b-41db-ab09-abc9c4b45332",
                            TwoFactorEnabled = false,
                            UserName = "Dimitrichko"
                        },
                        new
                        {
                            Id = "77388c0c-698c-4df9-9ad9-cef29116b666",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "59e0c6cd-f129-438d-9393-e5ff0bda916e",
                            Credits = 200m,
                            Email = "Vendor@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "VENDOR@GMAIL.COM",
                            NormalizedUserName = "VENDOR",
                            PasswordHash = "AQAAAAEAACcQAAAAELoe2nk7gCLu1xEnA6ot2hbREj4zs30xx+AneommLBkWI5rOnBM3V+omfs9+l3BsaA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "816a8eb5-52ee-4ca7-80fa-f2035a4cd7ab",
                            TwoFactorEnabled = false,
                            UserName = "Vendor"
                        },
                        new
                        {
                            Id = "c5d9e543-7c2f-4345-a014-ebd860eef718",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a1f0aa39-5020-4160-9dfd-f2e3852399d6",
                            Credits = 200m,
                            Email = "Matchmaker@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MATCHMAKER@GMAIL.COM",
                            NormalizedUserName = "MATCHMAKER",
                            PasswordHash = "AQAAAAEAACcQAAAAEMzXrFcdWrV1swTsItSCRiTmGo80N7b9b/sYjdh/UR+LLjvhG/MsKPaEpOpNKjVkgA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5311c6b5-cf04-49e9-9565-fb3f4dd8ad14",
                            TwoFactorEnabled = false,
                            UserName = "Matchmaker"
                        },
                        new
                        {
                            Id = "cc1cb39b-c0cf-41ed-856c-d3943aec605a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d3459645-2f99-4e30-af1c-6909df529302",
                            Credits = 200m,
                            Email = "Joe@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "JOE@GMAIL.COM",
                            NormalizedUserName = "JOE",
                            PasswordHash = "AQAAAAEAACcQAAAAEIAlMjaKd4TZtE57k+Iwt+jpZIC6G+nO9eBi1ro4L/oRCYmFPwkIrEE//g+0coYg8Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d123a72f-1d38-4fd1-8b64-098c50329634",
                            TwoFactorEnabled = false,
                            UserName = "Joe"
                        },
                        new
                        {
                            Id = "1f5be09b-2910-4ac0-8ff5-5c525ddf1b61",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "19b7e6bb-ef8f-49a1-b7b3-19d5deb3b9cd",
                            Credits = 200m,
                            Email = "Paul@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "PAUL@GMAIL.COM",
                            NormalizedUserName = "PAUL",
                            PasswordHash = "AQAAAAEAACcQAAAAECJKUjBxcZvcoPpnumgEfGjdoRhYk9wqmvlAdkhqsvVhmV6hqroh0NL3P3E+iM8zsA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d8057f24-41f3-4507-8c42-d2f89753eabb",
                            TwoFactorEnabled = false,
                            UserName = "Paul"
                        });
                });

            modelBuilder.Entity("AirsoftMatchMaker.Infrastructure.Data.Entities.Vendor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Vendors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsActive = true,
                            UserId = "77388c0c-698c-4df9-9ad9-cef29116b666"
                        });
                });

            modelBuilder.Entity("AirsoftMatchMaker.Infrastructure.Data.Entities.Weapon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AverageAmmoExpendedPerGame")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<double>("FeetPerSecond")
                        .HasColumnType("float");

                    b.Property<double>("FireRate")
                        .HasColumnType("float");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("PreferedEngagementDistance")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("VendorId")
                        .HasColumnType("int");

                    b.Property<int>("WeaponType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("VendorId");

                    b.ToTable("Weapons");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AverageAmmoExpendedPerGame = 40,
                            Description = "Small pistol",
                            FeetPerSecond = 120.0,
                            FireRate = 300.0,
                            ImageUrl = "https://arms-bg.com/wp-content/uploads/imported/2.6412_17_links_2000_1125_0-600x600.jpg",
                            Name = "Glock 17",
                            PlayerId = 3,
                            PreferedEngagementDistance = 0,
                            Price = 20m,
                            WeaponType = 0
                        },
                        new
                        {
                            Id = 2,
                            AverageAmmoExpendedPerGame = 15,
                            Description = "Shotgun",
                            FeetPerSecond = 150.0,
                            FireRate = 100.0,
                            ImageUrl = "https://www.airsoft.bg/products/1334236938_160704__031226700_1656_02022011.jpg",
                            Name = "Benelli M3",
                            PlayerId = 2,
                            PreferedEngagementDistance = 1,
                            Price = 50m,
                            WeaponType = 1
                        },
                        new
                        {
                            Id = 3,
                            AverageAmmoExpendedPerGame = 90,
                            Description = "Popular Assault Rifle",
                            FeetPerSecond = 300.0,
                            FireRate = 666.0,
                            ImageUrl = "https://arms-bg.com/wp-content/uploads/2021/11/cyma-cm002a1-600x600.jpg",
                            Name = "M4A1",
                            PlayerId = 11,
                            PreferedEngagementDistance = 1,
                            Price = 100m,
                            WeaponType = 3
                        },
                        new
                        {
                            Id = 4,
                            AverageAmmoExpendedPerGame = 15,
                            Description = "Sniper Rifle",
                            FeetPerSecond = 500.0,
                            FireRate = 20.0,
                            ImageUrl = "https://cqb.bg/wp-content/uploads/1152193374_1.jpg",
                            Name = "AWP",
                            PlayerId = 12,
                            PreferedEngagementDistance = 2,
                            Price = 130m,
                            WeaponType = 4
                        },
                        new
                        {
                            Id = 5,
                            AverageAmmoExpendedPerGame = 120,
                            Description = "Good Smg",
                            FeetPerSecond = 110.0,
                            FireRate = 700.0,
                            ImageUrl = "https://nelo-mill.com/wp-content/uploads/2019/07/2.6311_MP5A5_links_ret_613_400_0.jpg",
                            Name = "Mp5",
                            PlayerId = 7,
                            PreferedEngagementDistance = 0,
                            Price = 70m,
                            WeaponType = 2
                        },
                        new
                        {
                            Id = 6,
                            AverageAmmoExpendedPerGame = 100,
                            Description = "Very fast fire rate",
                            FeetPerSecond = 280.0,
                            FireRate = 1200.0,
                            ImageUrl = "https://shop.crgroup.bg/media/t44s4/2543.jpg",
                            Name = "FAMAS",
                            PlayerId = 13,
                            PreferedEngagementDistance = 1,
                            Price = 80m,
                            WeaponType = 3
                        },
                        new
                        {
                            Id = 7,
                            AverageAmmoExpendedPerGame = 180,
                            Description = "Machine gun with good fire rate and good accuracy",
                            FeetPerSecond = 260.0,
                            FireRate = 900.0,
                            ImageUrl = "https://cqb.bg/wp-content/uploads/1152226012_6.jpg",
                            Name = "M249",
                            PlayerId = 4,
                            PreferedEngagementDistance = 1,
                            Price = 150m,
                            WeaponType = 5
                        },
                        new
                        {
                            Id = 8,
                            AverageAmmoExpendedPerGame = 20,
                            Description = "Old fashioned sniper rifle for classy people",
                            FeetPerSecond = 400.0,
                            FireRate = 15.0,
                            ImageUrl = "https://cqb.bg/wp-content/uploads/1152190150_3.jpg",
                            Name = "Kar98k",
                            PlayerId = 8,
                            PreferedEngagementDistance = 2,
                            Price = 110m,
                            WeaponType = 4
                        },
                        new
                        {
                            Id = 9,
                            AverageAmmoExpendedPerGame = 60,
                            Description = "Versatile assault rifle with good accuracy",
                            FeetPerSecond = 240.0,
                            FireRate = 600.0,
                            ImageUrl = "https://www.airsoft.bg/products/1333793093_Kalashnikov-AKM-AEG_CG120914_airsoft_zm.jpg",
                            Name = "AKM",
                            PlayerId = 14,
                            PreferedEngagementDistance = 1,
                            Price = 90m,
                            WeaponType = 3
                        },
                        new
                        {
                            Id = 10,
                            AverageAmmoExpendedPerGame = 300,
                            Description = "Overkill",
                            FeetPerSecond = 290.0,
                            FireRate = 3000.0,
                            ImageUrl = "https://www.evike.com/images/large/34905.jpg",
                            Name = "Minigun",
                            PlayerId = 5,
                            PreferedEngagementDistance = 0,
                            Price = 250m,
                            WeaponType = 5
                        },
                        new
                        {
                            Id = 11,
                            AverageAmmoExpendedPerGame = 40,
                            Description = "Small pistol. Good in tight quarters.",
                            FeetPerSecond = 110.0,
                            FireRate = 300.0,
                            ImageUrl = "https://i.pinimg.com/736x/92/86/dc/9286dcbb94e7faf0d648e63dd199de2f--products-is-.jpg",
                            Name = "USP",
                            PlayerId = 9,
                            PreferedEngagementDistance = 0,
                            Price = 25m,
                            WeaponType = 0
                        },
                        new
                        {
                            Id = 12,
                            AverageAmmoExpendedPerGame = 70,
                            Description = "Assault rifle good in most ranges.",
                            FeetPerSecond = 200.0,
                            FireRate = 666.0,
                            ImageUrl = "https://iwi.net/wp-content/uploads/2021/08/ACE_22_IWI_3687.jpg",
                            Name = "Galil",
                            PlayerId = 6,
                            PreferedEngagementDistance = 1,
                            Price = 60m,
                            WeaponType = 3
                        },
                        new
                        {
                            Id = 13,
                            AverageAmmoExpendedPerGame = 10,
                            Description = "Old sniper rifle frow WW2.",
                            FeetPerSecond = 240.0,
                            FireRate = 15.0,
                            ImageUrl = "https://static3.gunfire.com/eng_pl_Mosin-Nagant-1891-30-rifle-replica-with-PU-scope-1152227065_1.webp",
                            Name = "Mosin Nagant",
                            PlayerId = 10,
                            PreferedEngagementDistance = 2,
                            Price = 50m,
                            WeaponType = 4
                        },
                        new
                        {
                            Id = 14,
                            AverageAmmoExpendedPerGame = 90,
                            Description = "British bullpup assault rifle",
                            FeetPerSecond = 400.0,
                            FireRate = 650.0,
                            ImageUrl = "https://static4.gunfire.com/eng_pl_L85A2-Assault-Rifle-Replica-1152213851_1.webp",
                            Name = "L85A2",
                            PlayerId = 1,
                            PreferedEngagementDistance = 1,
                            Price = 80m,
                            WeaponType = 3
                        },
                        new
                        {
                            Id = 15,
                            AverageAmmoExpendedPerGame = 120,
                            Description = "Small automatic pistol",
                            FeetPerSecond = 125.0,
                            FireRate = 900.0,
                            ImageUrl = "https://media.mwstatic.com/product-images/src/alt1/850/850613a1.jpg?imwidth=480",
                            Name = "Glock 18 auto",
                            PlayerId = 15,
                            PreferedEngagementDistance = 0,
                            Price = 30m,
                            WeaponType = 0
                        },
                        new
                        {
                            Id = 16,
                            AverageAmmoExpendedPerGame = 20,
                            Description = "Only for terminators",
                            FeetPerSecond = 140.0,
                            FireRate = 50.0,
                            ImageUrl = "https://taylorsfirearms.com/media/catalog/product/cache/a309b6cb2676967c1a0c3ab51e5fa3c7/1/8/1887bl-l_2641_2_.jpg",
                            Name = "Winchester model 1887",
                            PreferedEngagementDistance = 0,
                            Price = 70m,
                            VendorId = 1,
                            WeaponType = 1
                        },
                        new
                        {
                            Id = 17,
                            AverageAmmoExpendedPerGame = 45,
                            Description = "Burst fire  assault rifle .",
                            FeetPerSecond = 250.0,
                            FireRate = 400.0,
                            ImageUrl = "https://cdn.shopify.com/s/files/1/1333/2651/products/Copy_of_M16-A3-01_grande.jpg?v=1571467240",
                            Name = "M16A3",
                            PreferedEngagementDistance = 1,
                            Price = 60m,
                            VendorId = 1,
                            WeaponType = 3
                        },
                        new
                        {
                            Id = 18,
                            AverageAmmoExpendedPerGame = 75,
                            Description = "Popular Silenced Assault Rifle",
                            FeetPerSecond = 310.0,
                            FireRate = 600.0,
                            ImageUrl = "https://esportzbet.com/wp-content/uploads/2019/05/dw1-min.png",
                            Name = "M4A1-S",
                            PreferedEngagementDistance = 1,
                            Price = 110m,
                            VendorId = 1,
                            WeaponType = 3
                        },
                        new
                        {
                            Id = 19,
                            AverageAmmoExpendedPerGame = 15,
                            Description = "Sniper Rifle good for long range.",
                            FeetPerSecond = 450.0,
                            FireRate = 20.0,
                            ImageUrl = "https://i0.wp.com/cms.sofrep.com/wp-content/uploads/2013/07/M40A5.jpg?fit=562%2C198&ssl=1",
                            Name = "M40A5",
                            PreferedEngagementDistance = 2,
                            Price = 120m,
                            VendorId = 1,
                            WeaponType = 4
                        },
                        new
                        {
                            Id = 20,
                            AverageAmmoExpendedPerGame = 150,
                            Description = "Good Smg with insane fire rate",
                            FeetPerSecond = 100.0,
                            FireRate = 1200.0,
                            ImageUrl = "https://static4.gunfire.com/eng_pl_KRISS-Vector-Submachine-Gun-Replica-Half-Tan-1152223174_6.webp",
                            Name = "Kriss Vector",
                            PreferedEngagementDistance = 0,
                            Price = 100m,
                            VendorId = 1,
                            WeaponType = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "56d661fd-2339-498a-bd7e-c95f37908b28",
                            RoleId = "52f73adc-3c27-40de-b00e-2e2b382da84c"
                        },
                        new
                        {
                            UserId = "202efe8b-7748-49ca-834c-fd1c37978ab2",
                            RoleId = "6b3c10a1-4a55-411a-8dca-49574cb55e74"
                        },
                        new
                        {
                            UserId = "2a1bd8b6-6d06-470b-9dda-fe88aa1bf5e8",
                            RoleId = "6b3c10a1-4a55-411a-8dca-49574cb55e74"
                        },
                        new
                        {
                            UserId = "4d64daba-17d4-452c-af3e-5d731a250283",
                            RoleId = "6b3c10a1-4a55-411a-8dca-49574cb55e74"
                        },
                        new
                        {
                            UserId = "b2451308-1197-4362-be78-f7ea7ca35fe9",
                            RoleId = "6b3c10a1-4a55-411a-8dca-49574cb55e74"
                        },
                        new
                        {
                            UserId = "f3534aed-259b-4ff7-b816-15e8207e084a",
                            RoleId = "6b3c10a1-4a55-411a-8dca-49574cb55e74"
                        },
                        new
                        {
                            UserId = "f580c1f9-d41f-455e-b4ec-705b834e4b19",
                            RoleId = "6b3c10a1-4a55-411a-8dca-49574cb55e74"
                        },
                        new
                        {
                            UserId = "14677dd9-7de7-41c0-9418-e43ddcf64859",
                            RoleId = "6b3c10a1-4a55-411a-8dca-49574cb55e74"
                        },
                        new
                        {
                            UserId = "c95011ef-d0e4-49c0-bbdd-1b9985bf7a74",
                            RoleId = "6b3c10a1-4a55-411a-8dca-49574cb55e74"
                        },
                        new
                        {
                            UserId = "1f1087d3-a55a-4b7a-932e-1c3f9817fcf0",
                            RoleId = "6b3c10a1-4a55-411a-8dca-49574cb55e74"
                        },
                        new
                        {
                            UserId = "5f83ea0f-418b-463f-9a52-bf1b9eac8bc6",
                            RoleId = "6b3c10a1-4a55-411a-8dca-49574cb55e74"
                        },
                        new
                        {
                            UserId = "0a9aab7f-739a-41d8-b18d-8b797c7a2dfe",
                            RoleId = "6b3c10a1-4a55-411a-8dca-49574cb55e74"
                        },
                        new
                        {
                            UserId = "3bf3238b-ab04-4945-8bd0-1eabf8a208d5",
                            RoleId = "6b3c10a1-4a55-411a-8dca-49574cb55e74"
                        },
                        new
                        {
                            UserId = "18a322e4-ade8-4f13-8981-4cac7be64b9c",
                            RoleId = "6b3c10a1-4a55-411a-8dca-49574cb55e74"
                        },
                        new
                        {
                            UserId = "799495ef-8794-491d-94d9-6bd37d51ba40",
                            RoleId = "6b3c10a1-4a55-411a-8dca-49574cb55e74"
                        },
                        new
                        {
                            UserId = "6f4bc586-751a-4a4b-8fec-4c7145b47a3e",
                            RoleId = "6b3c10a1-4a55-411a-8dca-49574cb55e74"
                        },
                        new
                        {
                            UserId = "77388c0c-698c-4df9-9ad9-cef29116b666",
                            RoleId = "d0bd950a-e2d5-46cf-a6c1-1f0efa4144ce"
                        },
                        new
                        {
                            UserId = "c5d9e543-7c2f-4345-a014-ebd860eef718",
                            RoleId = "fc9628b0-fa92-4be1-9f1f-9095d66f1ff8"
                        },
                        new
                        {
                            UserId = "56d661fd-2339-498a-bd7e-c95f37908b28",
                            RoleId = "b48af83e-7873-4ecd-82de-5d517e7b31f9"
                        },
                        new
                        {
                            UserId = "cc1cb39b-c0cf-41ed-856c-d3943aec605a",
                            RoleId = "b48af83e-7873-4ecd-82de-5d517e7b31f9"
                        },
                        new
                        {
                            UserId = "1f5be09b-2910-4ac0-8ff5-5c525ddf1b61",
                            RoleId = "b48af83e-7873-4ecd-82de-5d517e7b31f9"
                        },
                        new
                        {
                            UserId = "202efe8b-7748-49ca-834c-fd1c37978ab2",
                            RoleId = "b48af83e-7873-4ecd-82de-5d517e7b31f9"
                        },
                        new
                        {
                            UserId = "2a1bd8b6-6d06-470b-9dda-fe88aa1bf5e8",
                            RoleId = "b48af83e-7873-4ecd-82de-5d517e7b31f9"
                        },
                        new
                        {
                            UserId = "4d64daba-17d4-452c-af3e-5d731a250283",
                            RoleId = "b48af83e-7873-4ecd-82de-5d517e7b31f9"
                        },
                        new
                        {
                            UserId = "b2451308-1197-4362-be78-f7ea7ca35fe9",
                            RoleId = "b48af83e-7873-4ecd-82de-5d517e7b31f9"
                        },
                        new
                        {
                            UserId = "f3534aed-259b-4ff7-b816-15e8207e084a",
                            RoleId = "b48af83e-7873-4ecd-82de-5d517e7b31f9"
                        },
                        new
                        {
                            UserId = "f580c1f9-d41f-455e-b4ec-705b834e4b19",
                            RoleId = "b48af83e-7873-4ecd-82de-5d517e7b31f9"
                        },
                        new
                        {
                            UserId = "77388c0c-698c-4df9-9ad9-cef29116b666",
                            RoleId = "b48af83e-7873-4ecd-82de-5d517e7b31f9"
                        },
                        new
                        {
                            UserId = "c5d9e543-7c2f-4345-a014-ebd860eef718",
                            RoleId = "b48af83e-7873-4ecd-82de-5d517e7b31f9"
                        },
                        new
                        {
                            UserId = "14677dd9-7de7-41c0-9418-e43ddcf64859",
                            RoleId = "b48af83e-7873-4ecd-82de-5d517e7b31f9"
                        },
                        new
                        {
                            UserId = "c95011ef-d0e4-49c0-bbdd-1b9985bf7a74",
                            RoleId = "b48af83e-7873-4ecd-82de-5d517e7b31f9"
                        },
                        new
                        {
                            UserId = "1f1087d3-a55a-4b7a-932e-1c3f9817fcf0",
                            RoleId = "b48af83e-7873-4ecd-82de-5d517e7b31f9"
                        },
                        new
                        {
                            UserId = "5f83ea0f-418b-463f-9a52-bf1b9eac8bc6",
                            RoleId = "b48af83e-7873-4ecd-82de-5d517e7b31f9"
                        },
                        new
                        {
                            UserId = "0a9aab7f-739a-41d8-b18d-8b797c7a2dfe",
                            RoleId = "b48af83e-7873-4ecd-82de-5d517e7b31f9"
                        },
                        new
                        {
                            UserId = "3bf3238b-ab04-4945-8bd0-1eabf8a208d5",
                            RoleId = "b48af83e-7873-4ecd-82de-5d517e7b31f9"
                        },
                        new
                        {
                            UserId = "18a322e4-ade8-4f13-8981-4cac7be64b9c",
                            RoleId = "b48af83e-7873-4ecd-82de-5d517e7b31f9"
                        },
                        new
                        {
                            UserId = "799495ef-8794-491d-94d9-6bd37d51ba40",
                            RoleId = "b48af83e-7873-4ecd-82de-5d517e7b31f9"
                        },
                        new
                        {
                            UserId = "6f4bc586-751a-4a4b-8fec-4c7145b47a3e",
                            RoleId = "b48af83e-7873-4ecd-82de-5d517e7b31f9"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AirsoftMatchMaker.Infrastructure.Data.Entities.Role", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasDiscriminator().HasValue("Role");

                    b.HasData(
                        new
                        {
                            Id = "52f73adc-3c27-40de-b00e-2e2b382da84c",
                            ConcurrencyStamp = "52f73adc-3c27-40de-b00e-2e2b382da84c",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR",
                            Description = "Responsible for granting roles."
                        },
                        new
                        {
                            Id = "d0bd950a-e2d5-46cf-a6c1-1f0efa4144ce",
                            ConcurrencyStamp = "d0bd950a-e2d5-46cf-a6c1-1f0efa4144ce",
                            Name = "Vendor",
                            NormalizedName = "VENDOR",
                            Description = "Imports and sells items. Cannot be a active player or matchmaker."
                        },
                        new
                        {
                            Id = "6b3c10a1-4a55-411a-8dca-49574cb55e74",
                            ConcurrencyStamp = "6b3c10a1-4a55-411a-8dca-49574cb55e74",
                            Name = "Player",
                            NormalizedName = "PLAYER",
                            Description = "Participates in games. Cannot be a active vendor or matchmaker."
                        },
                        new
                        {
                            Id = "fc9628b0-fa92-4be1-9f1f-9095d66f1ff8",
                            ConcurrencyStamp = "fc9628b0-fa92-4be1-9f1f-9095d66f1ff8",
                            Name = "Matchmaker",
                            NormalizedName = "MATCHMAKER",
                            Description = "Creates games and collects entry fee. Cannot be a active vendor or player. Cannot bet on games!"
                        },
                        new
                        {
                            Id = "b48af83e-7873-4ecd-82de-5d517e7b31f9",
                            ConcurrencyStamp = "b48af83e-7873-4ecd-82de-5d517e7b31f9",
                            Name = "GuestUser",
                            NormalizedName = "GUESTUSER",
                            Description = "User with no other roles. Can only bet on games."
                        });
                });

            modelBuilder.Entity("AirsoftMatchMaker.Infrastructure.Data.Entities.AmmoBox", b =>
                {
                    b.HasOne("AirsoftMatchMaker.Infrastructure.Data.Entities.Vendor", "Vendor")
                        .WithMany("AmmoBoxes")
                        .HasForeignKey("VendorId");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("AirsoftMatchMaker.Infrastructure.Data.Entities.Bet", b =>
                {
                    b.HasOne("AirsoftMatchMaker.Infrastructure.Data.Entities.Game", "Game")
                        .WithMany("Bets")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AirsoftMatchMaker.Infrastructure.Data.Entities.User", "User")
                        .WithMany("Bets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AirsoftMatchMaker.Infrastructure.Data.Entities.Clothing", b =>
                {
                    b.HasOne("AirsoftMatchMaker.Infrastructure.Data.Entities.Player", "Player")
                        .WithMany("Clothes")
                        .HasForeignKey("PlayerId");

                    b.HasOne("AirsoftMatchMaker.Infrastructure.Data.Entities.Vendor", "Vendor")
                        .WithMany("Clothes")
                        .HasForeignKey("VendorId");

                    b.Navigation("Player");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("AirsoftMatchMaker.Infrastructure.Data.Entities.Game", b =>
                {
                    b.HasOne("AirsoftMatchMaker.Infrastructure.Data.Entities.GameMode", "GameMode")
                        .WithMany("Games")
                        .HasForeignKey("GameModeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AirsoftMatchMaker.Infrastructure.Data.Entities.Map", "Map")
                        .WithMany("Games")
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AirsoftMatchMaker.Infrastructure.Data.Entities.Matchmaker", "Matchmaker")
                        .WithMany("OrganisedGames")
                        .HasForeignKey("MatchmakerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AirsoftMatchMaker.Infrastructure.Data.Entities.Team", "TeamBlue")
                        .WithMany("GamesAsTeamBlue")
                        .HasForeignKey("TeamBlueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AirsoftMatchMaker.Infrastructure.Data.Entities.Team", "TeamRed")
                        .WithMany("GamesAsTeamRed")
                        .HasForeignKey("TeamRedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GameMode");

                    b.Navigation("Map");

                    b.Navigation("Matchmaker");

                    b.Navigation("TeamBlue");

                    b.Navigation("TeamRed");
                });

            modelBuilder.Entity("AirsoftMatchMaker.Infrastructure.Data.Entities.GameBetCreditsContainer", b =>
                {
                    b.HasOne("AirsoftMatchMaker.Infrastructure.Data.Entities.Game", "Game")
                        .WithOne("GameBetCreditsContainer")
                        .HasForeignKey("AirsoftMatchMaker.Infrastructure.Data.Entities.GameBetCreditsContainer", "GameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("AirsoftMatchMaker.Infrastructure.Data.Entities.Map", b =>
                {
                    b.HasOne("AirsoftMatchMaker.Infrastructure.Data.Entities.GameMode", "GameMode")
                        .WithMany("Maps")
                        .HasForeignKey("GameModeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GameMode");
                });

            modelBuilder.Entity("AirsoftMatchMaker.Infrastructure.Data.Entities.Matchmaker", b =>
                {
                    b.HasOne("AirsoftMatchMaker.Infrastructure.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AirsoftMatchMaker.Infrastructure.Data.Entities.Player", b =>
                {
                    b.HasOne("AirsoftMatchMaker.Infrastructure.Data.Entities.PlayerClass", "PlayerClass")
                        .WithMany("Players")
                        .HasForeignKey("PlayerClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AirsoftMatchMaker.Infrastructure.Data.Entities.Team", "Team")
                        .WithMany("Players")
                        .HasForeignKey("TeamId");

                    b.HasOne("AirsoftMatchMaker.Infrastructure.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlayerClass");

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AirsoftMatchMaker.Infrastructure.Data.Entities.RoleRequest", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AirsoftMatchMaker.Infrastructure.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AirsoftMatchMaker.Infrastructure.Data.Entities.TeamRequest", b =>
                {
                    b.HasOne("AirsoftMatchMaker.Infrastructure.Data.Entities.Player", "Player")
                        .WithMany("TeamRequests")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AirsoftMatchMaker.Infrastructure.Data.Entities.Team", "Team")
                        .WithMany("TeamRequests")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("AirsoftMatchMaker.Infrastructure.Data.Entities.Vendor", b =>
                {
                    b.HasOne("AirsoftMatchMaker.Infrastructure.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AirsoftMatchMaker.Infrastructure.Data.Entities.Weapon", b =>
                {
                    b.HasOne("AirsoftMatchMaker.Infrastructure.Data.Entities.Player", "Player")
                        .WithMany("Weapons")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AirsoftMatchMaker.Infrastructure.Data.Entities.Vendor", "Vendor")
                        .WithMany("Weapons")
                        .HasForeignKey("VendorId");

                    b.Navigation("Player");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AirsoftMatchMaker.Infrastructure.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AirsoftMatchMaker.Infrastructure.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AirsoftMatchMaker.Infrastructure.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AirsoftMatchMaker.Infrastructure.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AirsoftMatchMaker.Infrastructure.Data.Entities.Game", b =>
                {
                    b.Navigation("Bets");

                    b.Navigation("GameBetCreditsContainer")
                        .IsRequired();
                });

            modelBuilder.Entity("AirsoftMatchMaker.Infrastructure.Data.Entities.GameMode", b =>
                {
                    b.Navigation("Games");

                    b.Navigation("Maps");
                });

            modelBuilder.Entity("AirsoftMatchMaker.Infrastructure.Data.Entities.Map", b =>
                {
                    b.Navigation("Games");
                });

            modelBuilder.Entity("AirsoftMatchMaker.Infrastructure.Data.Entities.Matchmaker", b =>
                {
                    b.Navigation("OrganisedGames");
                });

            modelBuilder.Entity("AirsoftMatchMaker.Infrastructure.Data.Entities.Player", b =>
                {
                    b.Navigation("Clothes");

                    b.Navigation("TeamRequests");

                    b.Navigation("Weapons");
                });

            modelBuilder.Entity("AirsoftMatchMaker.Infrastructure.Data.Entities.PlayerClass", b =>
                {
                    b.Navigation("Players");
                });

            modelBuilder.Entity("AirsoftMatchMaker.Infrastructure.Data.Entities.Team", b =>
                {
                    b.Navigation("GamesAsTeamBlue");

                    b.Navigation("GamesAsTeamRed");

                    b.Navigation("Players");

                    b.Navigation("TeamRequests");
                });

            modelBuilder.Entity("AirsoftMatchMaker.Infrastructure.Data.Entities.User", b =>
                {
                    b.Navigation("Bets");
                });

            modelBuilder.Entity("AirsoftMatchMaker.Infrastructure.Data.Entities.Vendor", b =>
                {
                    b.Navigation("AmmoBoxes");

                    b.Navigation("Clothes");

                    b.Navigation("Weapons");
                });
#pragma warning restore 612, 618
        }
    }
}
